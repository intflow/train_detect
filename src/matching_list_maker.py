"""
Writer: GyeongBong Kim
Date: 23 Jan, 2020
Summary:
	- This script makes matching list between label and meta data which are generated by 'Superb AI' company.
Revision:
	- 20 Apr, 2020 Support arguments to merge into jetson nano training tool-chain by K.M.Jeon
"""

## Load packages
import json
import os
from io import open
import pickle
import argparse

from tqdm import tqdm

def main():
	parser = argparse.ArgumentParser()
	parser.add_argument('--data_path', help='input data path where label and meta folders are located',
						default='.')
	args = parser.parse_args()
	
	HOME = args.data_path
	print(HOME)
	
	## Get all label json file:
	label_json_list = []
	label_folder_path = HOME+'/labels/'
	for Par, Subs, Files in os.walk(label_folder_path):
		for each_file in Files:
			ext = os.path.splitext(each_file)[-1]

			if ext == '.json':
				label_json_list.append(os.path.join(Par, each_file))


	## Get all meta file:
	meta_json_list = []
	meta_folder_path = HOME+'/meta/'
	for Par, Subs, Files in os.walk(meta_folder_path):
		for each_file in Files:
			ext = os.path.splitext(each_file)[-1]

			if ext == '.json':
				meta_json_list.append(os.path.join(Par, each_file))


	## Matching meta - label:
	matching_list = []
	for idx, each_meta_file in tqdm(enumerate(meta_json_list)):
		with open(each_meta_file, 'r', encoding="utf-8") as f:
			meta_load = json.load(f)
			label_id = meta_load['label_id']


		for idx2, each_label_file in enumerate(label_json_list):
			label_path_sample = os.path.splitext(each_label_file)[0]
			label_file_name = os.path.split(label_path_sample)[-1]

			if str(label_id) == str(label_file_name):
				matching_list.append([each_meta_file, each_label_file])

			
	with open(HOME+'/matching_file_path.pickle', 'wb') as f:
		pickle.dump(matching_list, f)
		# for each_list in matching_list:
		#	  f.write(str(each_list) + '\n')	


if __name__ == '__main__':
	main()

# ## Open each json file
# for idx, each_path in tqdm(enumerate(file_list)):
#	  with open(each_path) as json_file:
#		  json_data = json.load(json_file)
		
#		  info_in_json = json_data['result']['objects']
#		  print('\n')
#		  print(info_in_json)
#		  print('\n')

#		  id_info = info_in_json['id']
#		  class_info = info_in_json['class']
#		  # print(info_in_json[''])

#		  print(id_info)
#		  print(class_info)
#		  print('\n')
#		  import pdb; pdb.set_trace()


		# json_data = json.loads(json_file)

		# box = json_data['box']
		# print(box)
		# import pdb; pdb.set_trace()